var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.findInternal=function(a,e,c){a instanceof String&&(a=String(a));for(var d=a.length,f=0;f<d;f++){var k=a[f];if(e.call(c,k,f,a))return{i:f,v:k}}return{i:-1,v:void 0}};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;
$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(a,e,c){a!=Array.prototype&&a!=Object.prototype&&(a[e]=c.value)};$jscomp.getGlobal=function(a){a=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global,a];for(var e=0;e<a.length;++e){var c=a[e];if(c&&c.Math==Math)return c}return globalThis};$jscomp.global=$jscomp.getGlobal(this);
$jscomp.polyfill=function(a,e,c,d){if(e){c=$jscomp.global;a=a.split(".");for(d=0;d<a.length-1;d++){var f=a[d];f in c||(c[f]={});c=c[f]}a=a[a.length-1];d=c[a];e=e(d);e!=d&&null!=e&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:e})}};$jscomp.polyfill("Array.prototype.find",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).v}},"es6","es3");
describe("Keyboard events feature",function(){var a,e,c,d,f,k,m,n,b,g,l,h;beforeEach(function(){loadFixtures("timepicker.html");a=$("#timepicker1");f=a.timepicker();b=f.data("timepicker");e=$("#timepicker2");k=e.timepicker({template:"modal",showSeconds:!0,minuteStep:30,secondStep:30,defaultTime:!1});g=k.data("timepicker");c=$("#timepicker3");m=c.timepicker({defaultTime:"23:15:20",showMeridian:!1,showSeconds:!0,template:!1});l=m.data("timepicker");d=$("#timepicker-snapper");n=d.timepicker({snapToStep:!0});
h=n.data("timepicker")});afterEach(function(){a.data("timepicker").remove();e.data("timepicker").remove();c.data("timepicker").remove();d.data("timepicker").remove();a.remove();e.remove();c.remove();d.remove()});it("should be able to set time via input",function(){a.trigger("focus");expect(b.highlightedUnit).toBe("hour");a.autotype("{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}9:45a{{tab}}");expect(b.highlightedUnit).toBe("minute");expect(b.getTime()).toBe("9:45 AM");expect(a.is(":focus")).toBe(!1)});
it("should be able to control element by the arrow keys",function(){b.setTime("11:30 AM");b.update();a.trigger("focus");expect(b.highlightedUnit).toBe("hour","hour should be highlighted by default");a.autotype("{{up}}");expect(b.getTime()).toBe("12:30 PM","1");a.autotype("{{down}}");expect(b.getTime()).toBe("11:30 AM","2");expect(b.highlightedUnit).toBe("hour","hour should be highlighted");a.autotype("{{right}}");expect(b.highlightedUnit).toBe("minute","minute should be highlighted");a.autotype("{{up}}");
expect(b.getTime()).toBe("11:45 AM","3");expect(b.highlightedUnit).toBe("minute","minute should be highlighted 1");a.autotype("{{down}}");expect(b.getTime()).toBe("11:30 AM","4");expect(b.highlightedUnit).toBe("minute","minute should be highlighted 2");a.autotype("{{right}}");expect(b.highlightedUnit).toBe("meridian","meridian should be highlighted");a.autotype("{{up}}");expect(b.getTime()).toBe("11:30 PM","5");expect(b.highlightedUnit).toBe("meridian","meridian should be highlighted");a.autotype("{{down}}");
expect(b.getTime()).toBe("11:30 AM","6");expect(b.highlightedUnit).toBe("meridian","meridian should be highlighted");a.autotype("{{left}}");expect(b.highlightedUnit).toBe("minute","minutes should be highlighted");a.autotype("{{down}}");expect(b.getTime()).toBe("11:15 AM","7");a.autotype("{{left}}");expect(b.highlightedUnit).toBe("hour","hours should be highlighted");a.autotype("{{down}}");expect(b.getTime()).toBe("10:15 AM","8");a.autotype("{{left}}");expect(b.highlightedUnit).toBe("meridian","meridian should be highlighted");
a.autotype("{{down}}");expect(b.getTime()).toBe("10:15 PM","9")});it("should move the cursor left when shift+tab is pressed",function(){a.trigger("focus");a.autotype("{{tab}}{{right}}");expect(b.highlightedUnit).toBe("meridian");a.autotype("{{shift}}{{tab}}{{tab}}{{/shift}}");expect(b.highlightedUnit).toBe("hour");a.autotype("{{shift}}{{tab}}{{/shift}}");expect(a.is(":focus")).toBe(!1)});it("should be able to control element with arrow keys and tab",function(){h.setTime("12:00 AM");h.update();d.trigger("focus");
d.autotype("{{down}}{{tab}}{{up}}{{tab}}");expect(h.getTime()).toBe("11:15 PM");expect(h.highlightedUnit).toBe("meridian","tab should have highlighed meridian");d.autotype("{{shift}}{{tab}}{{/shift}}{{up}}");expect(h.getTime()).toBe("11:30 PM","shift+tab up should have incremented minutes to next step");d.autotype("{{shift}}{{tab}}{{tab}}{{/shift}}");expect(d.is(":focus")).toBe(!1,"timepicker should not be focused")});it("should be able to change time via widget inputs in a dropdown",function(){var c=
b.$widget.find("input.bootstrap-timepicker-hour"),e=b.$widget.find("input.bootstrap-timepicker-minute"),d=b.$widget.find("input.bootstrap-timepicker-meridian"),f=0,g;b.setTime("9:30 AM");a.parents("div").find(".input-group-addon").click();a.timepicker().on("changeTime.timepicker",function(a){f++;g=a.time.value});expect(b.isOpen).toBe(!0,"dropdown should be open");expect(b.getTime()).toBe("9:30 AM","should be default time");c.trigger("focus");expect(f).toBe(0,"event count should be 0");c.autotype("{{back}}{{back}}11{{tab}}");
expect(b.getTime()).toBe("11:30 AM");expect(f).toBe(4,"incorrect update events thrown");expect(g).toBe("11:30 AM","event throwing wrong time");e.autotype("{{back}}{{back}}45{{tab}}");expect(b.minute).toBe(45);expect(f).toBe(8,"incorrect update events thrown");expect(g).toBe("11:45 AM");d.autotype("{{back}}{{back}}pm{{tab}}");expect(b.meridian).toBe("PM");expect(f).toBe(12,"incorrect update events thrown");expect(g).toBe("11:45 PM")});it("should still be empty if input is empty",function(){a.autotype("{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{tab}}");
expect(a.val()).toBe("")});it("should allow time to be changed via widget inputs in a modal",function(){g.setTime("9:30 AM");g.update();e.parents("div").find(".input-group-addon").click();var a=$("body").find("input.bootstrap-timepicker-hour"),b=$("body").find("input.bootstrap-timepicker-minute"),c=$("body").find("input.bootstrap-timepicker-second"),d=$("body").find("input.bootstrap-timepicker-meridian");a.autotype("{{back}}{{back}}2{{tab}}");expect(g.getTime()).toBe("2:30:00 AM");b.autotype("{{back}}{{back}}0{{tab}}");
expect(g.getTime()).toBe("2:00:00 AM");c.autotype("{{back}}{{back}}30{{tab}}");expect(g.getTime()).toBe("2:00:30 AM");d.autotype("{{back}}{{back}}p{{tab}}");expect(g.getTime()).toBe("2:00:30 PM")});it("should be 12:00 AM if 00:00 AM is entered",function(){a.autotype("{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}0:0 AM{{tab}}");expect(b.getTime()).toBe("12:00 AM")});it("should snap to nearest step or overflow to zero if snapToStep is true",function(){});it("should validate input",
function(){var a=b.$widget.find("input.bootstrap-timepicker-hour"),c=b.$widget.find("input.bootstrap-timepicker-minute"),d=b.$widget.find("input.bootstrap-timepicker-meridian"),e=l.$element;b.setTime("11:30 AM");b.update();a.autotype("{{back}}{{back}}10{{tab}}");expect(b.getTime()).toBe("10:30 AM");c.autotype("{{back}}{{back}}60{{tab}}");expect(b.getTime()).toBe("10:59 AM");d.autotype("{{back}}{{back}}dk{{tab}}");expect(b.getTime()).toBe("10:59 AM");d.autotype("{{back}}{{back}}p{{tab}}");expect(b.getTime()).toBe("10:59 PM");
e.autotype("{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}25:60:60{{tab}}");expect(l.getTime()).toBe("23:59:59")});it("should close timepicker widget on TAB out of field",function(){a.trigger("focus");b.showWidget();expect(b.isOpen).toBe(!0);expect(b.highlightedUnit).toBe("hour");a.autotype("{{tab}}");expect(b.highlightedUnit).toBe("minute");a.autotype("{{tab}}");expect(b.highlightedUnit).toBe("meridian");a.autotype("{{tab}}");expect(b.isOpen).toBe(!1)});it("should close timepicker widget on SHIFT+TAB out of field",
function(){a.trigger("focus");b.showWidget();expect(b.isOpen).toBe(!0);expect(b.highlightedUnit).toBe("hour");a.autotype("{{tab}}");expect(b.highlightedUnit).toBe("minute");a.autotype("{{tab}}");expect(b.highlightedUnit).toBe("meridian");a.autotype("{{shift}}{{tab}}{{/shift}}");expect(b.highlightedUnit).toBe("minute");a.autotype("{{shift}}{{tab}}{{/shift}}");expect(b.highlightedUnit).toBe("hour");a.autotype("{{shift}}{{tab}}{{/shift}}");expect(b.isOpen).toBe(!1)})});
